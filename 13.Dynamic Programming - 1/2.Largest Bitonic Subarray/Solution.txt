int longestBitonicSubarray(int *input, int n) {
    int *output1 = new int[n];
    int *output2 = new int[n];
    // longest increasing sequence
    output1[0]=1;
    for(int i=0;i<n;i++){
        output1[i]=1;
        for(int j=i-1;j>=0;j--){
            if(input[j]>=input[i]){
                continue;
            }
            int possibleAns = output1[j]+1;
            if(possibleAns > output1[i]){
                output1[i]=possibleAns;
            }
        }
    }
    int bestLIS = 0;
    for(int i=0;i<n;i++){
        if(bestLIS<output1[i]){
            bestLIS = output1[i];
        }
    }
    // longest decreasing sequence
    output2[n-1]=1;
    for(int i=n-1;i>=0;i--){
        output2[i]=1;
        for(int j=i+1;j<n;j++){
            if(input[j]>=input[i])
                continue;
            int possibleAns = output2[j]+1;
            if(possibleAns > output2[i])
                output2[i]=possibleAns;
        }
    }
    int bestLDS = 0;
    for(int i=0;i<n;i++){
        if(bestLDS<output2[i]){
            bestLDS = output2[i];
        }
    }
    // longest Bitonic Sequence
    int bestLBS =0;
    for(int i=0;i<n;i++){
        output1[i]+=output2[i]-1;
        if(bestLBS<output1[i]){
            bestLBS = output1[i];
        }
    }
    delete[] output1;
    delete[] output2;
  return max(bestLBS,max(bestLIS,bestLDS));
}
