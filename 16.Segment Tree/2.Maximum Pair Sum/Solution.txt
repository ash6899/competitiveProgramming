#include<bits/stdc++.h>
using namespace std;
struct node{
    int maximum;
    int smaximum;
};
void bulidTree(int* arr,node* tree,int start,int end,int treeNode){
       if(start==end)
       {
           tree[treeNode].maximum=arr[start];
           tree[treeNode].smaximum=INT_MIN;
           return;
       }
       int mid = (start+end)/2;
       bulidTree(arr,tree,start,mid,2*treeNode);
       bulidTree(arr,tree,mid+1,end,2*treeNode+1);
       //tree[treeNode]=tree[2*treeNode]+tree[2*treeNode+1]; 
       node left = tree[2*treeNode];
       node right = tree[2*treeNode+1];
       tree[treeNode].maximum=max(left.maximum,right.maximum);
       tree[treeNode].smaximum=min(max(left.maximum,right.smaximum),max(left.smaximum,right.maximum));
       return;
}
void updateTree(int *arr,node* tree,int start,int end,int treeNode,int idx,int value){
    if(start==end)
    {
        arr[idx]=value;
        tree[treeNode].maximum=value;
        tree[treeNode].smaximum=INT_MIN;
        return;
    }
    int mid = (start+end)/2;
    if(idx>mid)
    {
        updateTree(arr,tree,mid+1,end,2*treeNode+1,idx,value);
    
    }else {
        updateTree(arr,tree,start,mid,2*treeNode,idx,value);
    }
    node left = tree[2*treeNode];
    node right = tree[2*treeNode+1];
    tree[treeNode].maximum=max(left.maximum,right.maximum);
    tree[treeNode].smaximum=min(max(left.maximum,right.smaximum),max(left.smaximum,right.maximum));
    return;
    //tree[treeNode]=tree[2*treeNode]+tree[2*treeNode+1];
}
node query(node* tree,int start,int end,int treeNode,int left,int right){
    //completely outside the given range
    if(start>right || end<left){
        node temp;
        temp.maximum=INT_MIN;
        temp.smaximum=INT_MIN;
        return temp;
    }
    //completely inside the given range
    if(start>=left && end<=right){
        return tree[treeNode];
    }
    //partially inside and partially outside
    int mid = (start+end)/2;
    node l = query(tree,start,mid,2*treeNode,left,right);
    node r = query(tree,mid+1,end,2*treeNode+1,left,right);
    node ans;
    ans.maximum=max(l.maximum,r.maximum);
    ans.smaximum=min(max(l.maximum,r.smaximum),max(l.smaximum,r.maximum));
    return ans;
}

int main()
{
    int n;
    cin>>n;
    int* arr=new int[n];
    for(int i=0;i<n;i++)
    cin>>arr[i];
    node *tree = new node[4*n];
    bulidTree(arr,tree,0,n-1,1);
    int q;
    cin>>q;
    while(q--){
        char c;
        cin>>c;
        //cout<<c;
        if(c=='Q')
        {
            int l,r;
            cin>>l>>r;
            node result=query(tree,0,n-1,1,l-1,r-1);
            cout<<result.maximum+result.smaximum<<endl;
        }
        if(c=='U')
        {
            int x,y;
            cin>>x>>y;
            updateTree(arr,tree,0,n-1,1,x-1,y);
        }
    }

}